{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b0fe9a16-3721-4c71-b896-f8768694671c",
   "metadata": {},
   "source": [
    "6. You can turn a word into pig-Latin using the following two rules (simplified):• If the word starts with a consonant, move that letter to the end and append'ay'. For example, 'happy' becomes 'appyhay' and 'pencil' becomes 'encilpay'.• If the word starts with a vowel, simply append 'way' to the end of the word.For example, 'enter' becomes 'enterway' and 'other' becomes 'otherway' . Forour purposes, there are 5 vowels: a, e, i, o, u (so we count y as a consonant).Write a function pig() that takes a word (i.e., a string) as input and returns its pig-Latin form. Your function should still work if the input word contains upper casecharacters. Your output should always be lower case however.>>> pig('happy')'appyhay'>>> pig('Enter')'enterway"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b993347c-b0d5-4bbb-b359-3ee3fee4f5ed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "appyhay\n",
      "enterway\n"
     ]
    }
   ],
   "source": [
    "def pig(word):\n",
    "    # Convert the word to lowercase to handle uppercase characters\n",
    "    word = word.lower()\n",
    "\n",
    "    vowels = ['a', 'e', 'i', 'o', 'u']\n",
    "    if word[0] in vowels:\n",
    "        # If the word starts with a vowel, simply append 'way'\n",
    "        pig_latin_word = word + 'way'\n",
    "    else:\n",
    "        # If the word starts with a consonant, move the consonant to the end and append 'ay'\n",
    "        pig_latin_word = word[1:] + word[0] + 'ay'\n",
    "\n",
    "    return pig_latin_word\n",
    "\n",
    "# Test cases\n",
    "print(pig('happy'))  # 'appyhay'\n",
    "print(pig('Enter'))  # 'enterway'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e314048-d92c-4555-9c89-9a593a4d661f",
   "metadata": {},
   "source": [
    "b. Use function inside() from part a. to write an expression that tests whetherthe point (1,1) lies in both of the following rectangles: one with lower leftcorner (0.3, 0.5) and upper right corner (1.1, 0.7) and the other with lowerleft corner (0.5, 0.2) and upper right corner (1.1, 2)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "febc49ea-8342-4d13-9f62-5ac6e3fd275e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Point (1, 1) is not inside both rectangles.\n"
     ]
    }
   ],
   "source": [
    "# Define the inside function\n",
    "def inside(x, y, x1, y1, x2, y2):\n",
    "    # Check if (x, y) is within the rectangle's boundaries\n",
    "    if x1 <= x <= x2 and y1 <= y <= y2:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "# Test if (1, 1) is inside the first rectangle (0.3, 0.5) to (1.1, 0.7)\n",
    "rectangle1 = inside(1, 1, 0.3, 0.5, 1.1, 0.7)\n",
    "\n",
    "# Test if (1, 1) is inside the second rectangle (0.5, 0.2) to (1.1, 2)\n",
    "rectangle2 = inside(1, 1, 0.5, 0.2, 1.1, 2)\n",
    "\n",
    "# Check if (1, 1) is inside both rectangles\n",
    "if rectangle1 and rectangle2:\n",
    "    print(\"Point (1, 1) is inside both rectangles.\")\n",
    "else:\n",
    "    print(\"Point (1, 1) is not inside both rectangles.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c627b77-de6e-4795-b21f-d72458f5581b",
   "metadata": {},
   "source": [
    "7.File bloodtype1.txt records blood-types of patients (A, B, AB, O or OO) at a clinic.Write a function bldcount() that reads the file with name name and reports (i.e.,prints) how many patients there are in each bloodtype.>>> bldcount('bloodtype.txt')There are 10 patients of blood type A.There is one patient of blood type B.There are 10 patients of blood type AB.There are 12 patients of blood type O.There are no patients of blood type OO.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d6dac19-2ce4-4292-97da-bc9d06e88030",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The file 'bloodtype.txt' does not exist.\n"
     ]
    }
   ],
   "source": [
    "def bldcount(filename):\n",
    "    blood_type_counts = {\n",
    "        'A': 0,\n",
    "        'B': 0,\n",
    "        'AB': 0,\n",
    "        'O': 0,\n",
    "        'OO': 0\n",
    "    }\n",
    "\n",
    "    try:\n",
    "        with open(filename, 'r') as file:\n",
    "            for line in file:\n",
    "                blood_type = line.strip()  # Remove leading/trailing whitespace\n",
    "                if blood_type in blood_type_counts:\n",
    "                    blood_type_counts[blood_type] += 1\n",
    "\n",
    "        for blood_type, count in blood_type_counts.items():\n",
    "            if count == 1:\n",
    "                print(f\"There is one patient of blood type {blood_type}.\")\n",
    "            elif count > 1:\n",
    "                print(f\"There are {count} patients of blood type {blood_type}.\")\n",
    "            else:\n",
    "                print(f\"There are no patients of blood type {blood_type}.\")\n",
    "    \n",
    "    except FileNotFoundError:\n",
    "        print(f\"The file '{filename}' does not exist.\")\n",
    "\n",
    "# Test the function with 'bloodtype.txt'\n",
    "bldcount('bloodtype.txt')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc226917-56da-4463-a321-6feda102e473",
   "metadata": {},
   "source": [
    "8.Write a function curconv() that takes as input:1. a currency represented using a string (e.g., 'JPY' for the Japanese Yen or'EUR' for the Euro)2. an amountand then converts and returns the amount in US dollars.>>> curconv('EUR', 100)122.96544>>> curconv('JPY', 100)1.241401The currency rates you will need are stored in file currencies.txt:AUD 1.0345157 Australian DollarCHF 1.0237414 Swiss FrancCNY 0.1550176 Chinese Yuan DKK 0.1651442 Danish KroneEUR 1.2296544 EuroGBP 1.5550989 British PoundHKD 0.1270207 Hong Kong DollarINR 0.0177643 Indian RupeeJPY 0.01241401 Japanese YenMXN 0.0751848 Mexican PesoMYR 0.3145411 Malaysian RinggitNOK 0.1677063 Norwegian KroneNZD 0.8003591 New Zealand DollarPHP 0.0233234 Philippine PesoSEK 0.148269 Swedish KronaSGD 0.788871 Singapore DollarTHB 0.0313789 Thai Baht"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b212b2b4-bb05-4ea5-b014-00ada62e1bde",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'currencies.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 18\u001b[0m\n\u001b[0;32m     15\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCurrency not found in the exchange rates.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# Test cases\u001b[39;00m\n\u001b[1;32m---> 18\u001b[0m \u001b[38;5;28mprint\u001b[39m(curconv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mEUR\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;241m100\u001b[39m))  \u001b[38;5;66;03m# 122.96544\u001b[39;00m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mprint\u001b[39m(curconv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJPY\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;241m100\u001b[39m))\n",
      "Cell \u001b[1;32mIn[4], line 4\u001b[0m, in \u001b[0;36mcurconv\u001b[1;34m(currency, amount)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcurconv\u001b[39m(currency, amount):\n\u001b[0;32m      2\u001b[0m     \u001b[38;5;66;03m# Read the currency exchange rates from 'currencies.txt' into a dictionary\u001b[39;00m\n\u001b[0;32m      3\u001b[0m     exchange_rates \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m----> 4\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcurrencies.txt\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m      5\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m line \u001b[38;5;129;01min\u001b[39;00m file:\n\u001b[0;32m      6\u001b[0m             currency_code, rate \u001b[38;5;241m=\u001b[39m line\u001b[38;5;241m.\u001b[39msplit()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:286\u001b[0m, in \u001b[0;36m_modified_open\u001b[1;34m(file, *args, **kwargs)\u001b[0m\n\u001b[0;32m    279\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m file \u001b[38;5;129;01min\u001b[39;00m {\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m2\u001b[39m}:\n\u001b[0;32m    280\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m    281\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIPython won\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mt let you open fd=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfile\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m by default \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    282\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    283\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myou can use builtins\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m open.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    284\u001b[0m     )\n\u001b[1;32m--> 286\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m io_open(file, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'currencies.txt'"
     ]
    }
   ],
   "source": [
    "def curconv(currency, amount):\n",
    "    # Read the currency exchange rates from 'currencies.txt' into a dictionary\n",
    "    exchange_rates = {}\n",
    "    with open('currencies.txt', 'r') as file:\n",
    "        for line in file:\n",
    "            currency_code, rate = line.split()\n",
    "            exchange_rates[currency_code] = float(rate)\n",
    "\n",
    "    # Check if the specified currency exists in the exchange rates dictionary\n",
    "    if currency in exchange_rates:\n",
    "        # Convert the amount to US dollars using the exchange rate\n",
    "        usd_amount = amount * exchange_rates[currency]\n",
    "        return usd_amount\n",
    "    else:\n",
    "        return \"Currency not found in the exchange rates.\"\n",
    "\n",
    "# Test cases\n",
    "print(curconv('EUR', 100))  # 122.96544\n",
    "print(curconv('JPY', 100))  # 1.241401\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d11bf9c1-f94e-41bc-a565-a506a73b601d",
   "metadata": {},
   "source": [
    "9.Each of the following will cause an exception (an error)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d9ff11e-6891-44b6-8ffb-7a0a268a2ba2",
   "metadata": {
    "tags": []
   },
   "source": [
    "Trying to add incompatible variables, as inadding 6 + ‘a’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11daccaf-8058-4f46-b511-c2d7d25ea7f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cell In[6], line 1\n",
    "    Trying to add incompatible variables, as inadding 6 + ‘a’\n",
    "                                                          ^\n",
    "SyntaxError: invalid character '‘' (U+2018)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8812ff49-940e-4eb5-9e67-9d92e445c539",
   "metadata": {},
   "source": [
    "Referring to the 12th item of a list that has only 10 items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f56b43cd-aea7-4d85-bc27-98ae5132822d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Error = list index out of the range"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f01373f-be8c-47d6-a067-7a7feef47c33",
   "metadata": {},
   "source": [
    "Using a value that is out of range for a function’sinput, such as calling math.sqrt(-1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5852a1b-2710-4e54-9618-ba2069aa0c7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Error = math domain error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5353d3-c2aa-4047-b2d7-d1944a2bd300",
   "metadata": {},
   "source": [
    "Using an undeclared variable, such as print(x)when x has not been defined"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2905968-98e7-4e15-a02d-f59108f6febe",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Error = name 'x' is not defined"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d47cf5d-4097-4d5c-abd6-b81fb42fc818",
   "metadata": {},
   "source": [
    "Trying to open a file that does not exist, such asmistyping the file name or looking in the wrongdirectory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f073297-3365-48f8-ae21-3e03c68bde63",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Error =No such file or directory:'python.txt'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5324675f-b731-4f8e-b67d-2580a2794a2c",
   "metadata": {},
   "source": [
    "10.Encryption is the process of hiding the meaning of a text by substituting letters in themessage with other letters, according to some system. If the process is successful, noone but the intended recipient can understand the encrypted message. Cryptanalysisrefers to attempts to undo the encryption, even if some details of the encryption areunknown (for example, if an encrypted message has been intercepted). The first stepof cryptanalysis is often to build up a table of letter frequencies in the encrypted text.Assume that the string letters is already defined as'abcdefghijklmnopqrstuvwxyz'. Write a function called frequencies()that takes a string as its only parameter, and returns a list of integers, showing thenumber of times each character appears in the text. Your function may ignore anycharacters that are not in letters.>>> frequencies('The quick red fox got bored and went home.')[1, 1, 1, 3, 5, 1, 1, 2, 1, 0, 1, 0, 1, 2, 4, 0, 1, 2, 0, 2,1, 0, 1, 1, 0, 0]>>> frequencies('apple')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "68b7d999-7909-4d89-8d78-8e85ecbca7b4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 1, 3, 5, 1, 1, 2, 1, 0, 1, 0, 1, 2, 4, 0, 1, 2, 0, 3, 1, 0, 1, 1, 0, 0]\n",
      "[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "def frequencies(text):\n",
    "    # Define the list of letters\n",
    "    letters = 'abcdefghijklmnopqrstuvwxyz'\n",
    "    \n",
    "    # Initialize a list to store the frequency of each letter\n",
    "    letter_count = [0] * 26\n",
    "    \n",
    "    # Convert the input text to lowercase to ensure case-insensitive counting\n",
    "    text = text.lower()\n",
    "    \n",
    "    # Iterate through each character in the input text\n",
    "    for char in text:\n",
    "        if char in letters:\n",
    "            # Increment the count for the corresponding letter\n",
    "            index = letters.index(char)\n",
    "            letter_count[index] += 1\n",
    "    \n",
    "    return letter_count\n",
    "\n",
    "# Test cases\n",
    "print(frequencies('The quick red fox got bored and went home.'))  # [1, 1, 1, 3, 5, 1, 1, 2, 1, 0, 1, 0, 1, 2, 4, 0, 1, 2, 0, 2, 1, 0, 1, 1, 0, 0]\n",
    "print(frequencies('apple'))  # [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e7819aa-6273-4117-9d8b-ac0abf6b39d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
