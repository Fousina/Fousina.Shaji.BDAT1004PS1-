{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c08d5626-5ee9-4a83-b43a-3aea44a1415f",
   "metadata": {},
   "source": [
    "1.What data type is each of the following?\n",
    "5 - int\n",
    "5.0 -double\n",
    "5 > 1 - bool\n",
    "'5' - char\n",
    "5 * 2 - int\n",
    "'5' * 2 -string\n",
    "'5' + '2' - string\n",
    "5 / 2 - double\n",
    "5 % 2 - int\n",
    "{5, 2, 1} - List\n",
    "5 == 3 - bool\n",
    "Pi (the number) - double"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44c98aa7-0def-44f7-86c8-7f312286b0b5",
   "metadata": {},
   "source": [
    "2.Write (and evaluate) C# expressions that answer these questions:\n",
    "a. How many letters are there in 'Supercalifragilisticexpialidocious'?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "43be044b-4c74-4c2d-9592-e5f256c926dd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no.of letters34\n"
     ]
    }
   ],
   "source": [
    "string word = \"Supercalifragilisticexpialidocious\";\n",
    "int letterCount = word.Length;\n",
    "Console.WriteLine(\"no.of letters\" +letterCount);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ebe7bff-3c7d-430d-bfd8-c8c235d6efae",
   "metadata": {},
   "source": [
    "b. Does 'Supercalifragilisticexpialidocious' contain 'ice' as a substring?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b973fda8-ca9a-4581-b0ea-0c4385cce9cc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "string word = \"Supercalifragilisticexpialidocious\";\n",
    "bool containsIce = word.Contains(\"ice\");\n",
    "Console.WriteLine(containsIce);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "400f410c-2bc8-4e0b-baff-74f961d818b6",
   "metadata": {},
   "source": [
    "c. Which of the following words is the longest:Supercalifragilisticexpialidocious, \n",
    "Honorificabilitudinitatibus, orBababadalgharaghtakamminarronnkonn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80a3da83-5366-4644-99a6-b785332aa9fd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Longest word is: Supercalifragilisticexpialidocious\n"
     ]
    }
   ],
   "source": [
    "string word1 = \"Supercalifragilisticexpialidocious\";\n",
    "string word2 = \"Honorificabilitudinitatibus\";\n",
    "string word3 = \"Bababadalgharaghtakamminarronnkonn\";\n",
    "\n",
    "string longestWord = \"\";\n",
    "\n",
    "if (word1.Length >= word2.Length && word1.Length >= word3.Length)\n",
    "{\n",
    "    longestWord = word1;\n",
    "}\n",
    "else if (word2.Length >= word1.Length && word2.Length >= word3.Length)\n",
    "{\n",
    "    longestWord = word2;\n",
    "}\n",
    "else\n",
    "{\n",
    "    longestWord = word3;\n",
    "}\n",
    "Console.WriteLine(\"Longest word is: \" + longestWord);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1e5ab53-37d4-4cdb-ba9e-3b97201ecf4a",
   "metadata": {},
   "source": [
    "d. Which composer comes first in the dictionary: 'Berlioz', 'Borodin', 'Brian',\n",
    "'Bartok', 'Bellini', 'Buxtehude', 'Bernstein'. Which one comes last?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ec5a3cdb-e548-40c1-9280-c2f2fc327149",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First composer: Bartok\n",
      "Last composer:Buxtehude\n"
     ]
    }
   ],
   "source": [
    "string[] composers = { \"Berlioz\", \"Borodin\", \"Brian\", \"Bartok\", \"Bellini\", \"Buxtehude\", \"Bernstein\" };\n",
    "\n",
    "Array.Sort(composers);\n",
    "\n",
    "string firstComposer = composers[0];\n",
    "string lastComposer = composers[composers.Length - 1];\n",
    "Console.WriteLine(\"First composer: \" + firstComposer);\n",
    "Console.WriteLine(\"Last composer:\" + lastComposer);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1e4967f-cba4-45db-adc9-c640e7c79b1c",
   "metadata": {},
   "source": [
    "3.Implement function triangleArea(a,b,c) that takes as input the lengths of the 3sides of a triangle and returns the area of the triangle. By Heron's formula, the areaof a triangle with side lengths a, b, and c iss(s - a)(s - b)(s - c) , wheres = (a + b + c) /2.>>> triangleArea(2,2,2)1.7320508075688772"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a0b6eefb-2355-4c64-acff-af31d456076b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.7320508075688772\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "    static double TriangleArea(double a, double b, double c)\n",
    "    {\n",
    "        double s = (a + b + c) / 2;\n",
    "\n",
    "        double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n",
    "\n",
    "        return area;\n",
    "    }\n",
    "\n",
    "        double result = TriangleArea(2, 2, 2);\n",
    "        Console.WriteLine(result);\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9af68216-47ca-4946-9dab-257767e30208",
   "metadata": {},
   "source": [
    "4.Write a program in C# Sharp to separate odd and even integers in separate arrays.Go to the editorTest Data :Input the number of elements to be stored in the array :5Input 5 elements in the array :element - 0 : 25element - 1 : 47element - 2 : 42element - 3 : 56element - 4 : 32Expected Output:The Even elements are:42 56 32The Odd elements are :25 47"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "70ec85b9-f484-4f69-8109-7e7eb7eca560",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Even elements : 42 56 32 \n",
      "The Odd elements : 25 47 \n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "        int[] inputArray ={25,47,42,56,32};\n",
    "        int n=5;\n",
    "        int[] evenArray = new int[n];\n",
    "        int[] oddArray = new int[n];\n",
    "\n",
    "        int evenCount = 0;\n",
    "        int oddCount = 0;\n",
    "\n",
    "        foreach (int num in inputArray)\n",
    "        {\n",
    "            if (num % 2 == 0)\n",
    "            {\n",
    "                evenArray[evenCount] = num;\n",
    "                evenCount++;\n",
    "            }\n",
    "            else\n",
    "            {\n",
    "                oddArray[oddCount] = num;\n",
    "                oddCount++;\n",
    "            }\n",
    "        }\n",
    "\n",
    "        Console.Write(\"The Even elements : \");\n",
    "        for (int i = 0; i < evenCount; i++)\n",
    "        {\n",
    "            Console.Write($\"{evenArray[i]} \");\n",
    "        }\n",
    "\n",
    "        Console.WriteLine();\n",
    "\n",
    "        Console.Write(\"The Odd elements : \");\n",
    "        for (int i = 0; i < oddCount; i++)\n",
    "        {\n",
    "            Console.Write($\"{oddArray[i]} \");\n",
    "        }\n",
    "\n",
    "        Console.WriteLine();\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae24304c-75e9-405e-b239-1da0ba7e3472",
   "metadata": {},
   "source": [
    "5.\n",
    "a. Write a function inside(x,y,x1,y1,x2,y2) that returns True or Falsedepending on whether the point (x,y) lies in the rectangle with lower leftcorner (x1,y1) and upper right corner (x2,y2).>>> inside(1,1,0,0,2,3)True>>> inside(-1,-1,0,0,2,3)False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "1f38f58f-b29c-4c5d-93b6-b3f3b3fe510d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inside(1, 1, 0, 0, 2, 3): True\n",
      "Inside(-1, -1, 0, 0, 2, 3): False\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "static bool Inside(double x, double y, double x1, double y1, double x2, double y2)\n",
    "{   \n",
    "    return (x >= x1 && x <= x2 && y >= y1 && y <= y2);\n",
    "}\n",
    "bool insideRet1 = Inside(1, 1, 0, 0, 2, 3);\n",
    "bool insideRet2 = Inside(-1, -1, 0, 0, 2, 3);\n",
    "if (insideRet1)\n",
    "{  \n",
    "    Console.WriteLine(\"Inside(1, 1, 0, 0, 2, 3): True\");\n",
    "}\n",
    "else\n",
    "{    \n",
    "    Console.WriteLine(\"Inside(1, 1, 0, 0, 2, 3): False\");\n",
    "}\n",
    "if (insideRet2)\n",
    "{   \n",
    "    Console.WriteLine(\"Inside(-1, -1, 0, 0, 2, 3): True\");\n",
    "}\n",
    "else\n",
    "{   \n",
    "    Console.WriteLine(\"Inside(-1, -1, 0, 0, 2, 3): False\");}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f037de2-de8a-40c1-b3b9-435d37a4dfe8",
   "metadata": {},
   "source": [
    "b.Use function inside() from part a. to write an expression that tests whetherthe point (1,1) lies in both of the following rectangles: one with lower leftcorner (0.3, 0.5) and upper right corner (1.1, 0.7) and the other with lowerleft corner (0.5, 0.2) and upper right corner (1.1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3f3d57fc-9784-4361-b48a-e0370e7b5a5e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is(1, 1) inside first rectangle False\n",
      "Is(1, 1) inside second rectangle True\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "    \n",
    "\n",
    "public static bool Inside(double x, double y, double x1, double y1, double x2, double y2)\n",
    "{  \n",
    "    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n",
    "}\n",
    "bool isInsideRectangle1 = Inside(1, 1, 0.3, 0.5, 1.1, 0.7);\n",
    "bool isInsideRectangle2 = Inside(1, 1, 0.5, 0.2, 1.1, 2);\n",
    "Console.WriteLine(\"Is(1, 1) inside first rectangle \" + isInsideRectangle1);\n",
    "Console.WriteLine(\"Is(1, 1) inside second rectangle \" + isInsideRectangle2);\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".NET (C#)",
   "language": "C#",
   "name": ".net-csharp"
  },
  "language_info": {
   "file_extension": ".cs",
   "mimetype": "text/x-csharp",
   "name": "C#",
   "pygments_lexer": "csharp",
   "version": "11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
